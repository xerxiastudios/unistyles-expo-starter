import type { UnistylesBridge, UnistylesPlugin } from '../types';
import type { UnistylesThemes } from '../global';
import type { UnistyleRegistry } from './UnistyleRegistry';
/**
 * Utility to interact with the Unistyles during runtime
 */
export declare class UnistylesRuntime {
    private unistylesBridge;
    private unistylesRegistry;
    constructor(unistylesBridge: UnistylesBridge, unistylesRegistry: UnistyleRegistry);
    /**
     * Get the current color scheme
     * @returns - The current color scheme
     */
    get colorScheme(): import("../types").ColorSchemeName;
    /**
     * Get info about adaptive themes
     * @returns - boolean indicating if the adaptive themes are enabled
     */
    get hasAdaptiveThemes(): boolean;
    /**
     * Get the current theme name
     * @returns - The current theme name
     */
    get themeName(): never;
    /**
     * Get the current content size category
     * @returns - The current content size category
     */
    get contentSizeCategory(): import("../common").IOSContentSizeCategory | import("../common").AndroidContentSizeCategory;
    /**
     * Get the current breakpoint based on device size
     * @returns - The current breakpoint
     */
    get breakpoint(): keyof import("../global").UnistylesBreakpoints;
    /**
     * Get registered breakpoints with UnitylesRegistry
     * @returns - The registered breakpoints
     */
    get breakpoints(): import("../global").UnistylesBreakpoints;
    /**
     * Get the names of currently enabled plugins
     * @returns - The names of currently enabled plugins
     */
    get enabledPlugins(): string[];
    /**
     * Get the screen size
     * @returns - The screen size { width, height }
     */
    get screen(): {
        width: number;
        height: number;
    };
    /**
     * Get the screen orientation
     * @returns - The screen orientation
     */
    get orientation(): "landscape" | "portrait";
    /**
     * Switch to a different theme
     * @param name - The name of the theme to switch to
     * @returns - boolean indicating if the theme was switched
     */
    setTheme: (name: keyof UnistylesThemes) => true | undefined;
    /**
     * Enable or disable adaptive themes
     * @param enable - boolean indicating if adaptive themes should be enabled
     */
    setAdaptiveThemes: (enable: boolean) => void;
    /**
     * Enable a plugin
     * @param plugin - Plugin that conforms to UnistylesPlugin interface
     */
    addPlugin: (plugin: UnistylesPlugin) => void;
    /**
     * Disable a plugin
     * @param plugin - Plugin that conforms to UnistylesPlugin interface
     */
    removePlugin: (plugin: UnistylesPlugin) => void;
}
//# sourceMappingURL=UnistylesRuntime.d.ts.map