import { NativeEventEmitter, NativeModules } from 'react-native';
import { normalizeWebStylesPlugin } from '../plugins';
import { isServer } from '../common';
export class UnistylesBridgeWeb {
  #timerRef = undefined;
  #hasAdaptiveThemes = false;
  #supportsAutomaticColorScheme = false;
  #screenWidth = isServer ? undefined : window.innerWidth;
  #screenHeight = isServer ? undefined : window.innerHeight;
  #themes = [];
  #breakpoints = {};
  #colorScheme = this.getPreferredColorScheme();
  #themeName = '';
  #enabledPlugins = [normalizeWebStylesPlugin.name];
  #unistylesEvents = new NativeEventEmitter(NativeModules.Unistyles);
  #sortedBreakpointPairs = [];
  #breakpoint = '';
  #contentSizeCategory = 'unspecified';
  constructor() {
    if (!isServer) {
      this.setupListeners();
      this.#screenWidth = window.innerWidth;
      this.#screenHeight = window.innerHeight;
    }
  }
  install() {
    // @ts-ignore
    // eslint-disable-next-line no-undef
    globalThis.__UNISTYLES__ = new Proxy({}, {
      get: (_target, prop) => {
        switch (prop) {
          case 'themeName':
            return this.getTheme();
          case 'screenWidth':
            return this.#screenWidth;
          case 'screenHeight':
            return this.#screenHeight;
          case 'contentSizeCategory':
            return this.#contentSizeCategory;
          case 'breakpoint':
            return this.#breakpoint || undefined;
          case 'breakpoints':
            return this.#breakpoints;
          case 'hasAdaptiveThemes':
            return this.#hasAdaptiveThemes;
          case 'sortedBreakpointPairs':
            return this.#sortedBreakpointPairs;
          case 'enabledPlugins':
            return this.#enabledPlugins;
          case 'colorScheme':
            return this.#colorScheme;
          case 'useTheme':
            return themeName => this.useTheme(themeName);
          case 'useBreakpoints':
            return breakpoints => this.useBreakpoints(breakpoints);
          case 'useAdaptiveThemes':
            return enable => this.useAdaptiveThemes(enable);
          case 'addPlugin':
            return (pluginName, notify) => this.addPlugin(pluginName, notify);
          case 'removePlugin':
            return pluginName => this.removePlugin(pluginName);
          default:
            return Reflect.get(this, prop);
        }
      },
      set: (target, prop, newValue, receiver) => {
        switch (prop) {
          case 'themes':
            {
              this.#themes = newValue;
              this.#supportsAutomaticColorScheme = newValue.includes('light') && newValue.includes('dark');
              return true;
            }
          case 'themeName':
            {
              this.#themeName = newValue;
              this.emitThemeChange();
              return true;
            }
          default:
            return Reflect.set(target, prop, newValue, receiver);
        }
      }
    });
    return true;
  }
  useTheme(themeName) {
    this.#themeName = themeName;
    this.emitThemeChange();
  }
  useBreakpoints(breakpoints) {
    this.#breakpoints = breakpoints;
    this.#sortedBreakpointPairs = Object.entries(breakpoints).sort(([, a], [, b]) => (a ?? 0) - (b ?? 0));
    if (!isServer) {
      this.#breakpoint = this.getBreakpointFromScreenWidth(this.#screenWidth);
    }
  }
  useAdaptiveThemes(enable) {
    this.#hasAdaptiveThemes = enable;
    if (!this.#hasAdaptiveThemes || !this.#supportsAutomaticColorScheme) {
      return;
    }
    if (this.#themeName !== this.#colorScheme) {
      this.#themeName = this.#colorScheme;
      this.emitThemeChange();
    }
  }
  addPlugin(pluginName, notify) {
    this.#enabledPlugins = [pluginName].concat(this.#enabledPlugins);
    if (notify) {
      this.emitPluginChange();
    }
  }
  removePlugin(pluginName) {
    this.#enabledPlugins = this.#enabledPlugins.filter(name => name !== pluginName);
    this.emitPluginChange();
  }
  getTheme() {
    if (this.#themes.length === 1) {
      return this.#themes.at(0);
    }
    return this.#themeName;
  }
  setupListeners() {
    window.addEventListener('resize', () => {
      clearTimeout(this.#timerRef);
      this.#timerRef = setTimeout(() => {
        this.#screenWidth = window.innerWidth;
        this.#screenHeight = window.innerHeight;
        this.#breakpoint = this.getBreakpointFromScreenWidth(this.#screenWidth);
        this.emitLayoutChange();
      }, 100);
    });
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
      this.#colorScheme = event.matches ? 'dark' : 'light';
      if (!this.#supportsAutomaticColorScheme || !this.#hasAdaptiveThemes) {
        return;
      }
      if (this.#colorScheme !== this.#themeName) {
        this.#themeName = this.#colorScheme;
        this.emitThemeChange();
      }
    });
  }
  getBreakpointFromScreenWidth(width) {
    const breakpoint = this.#sortedBreakpointPairs.find(([, value], index, otherBreakpoints) => {
      const minVal = value;
      const maxVal = otherBreakpoints[index + 1]?.[1];
      if (!maxVal) {
        return true;
      }
      return width >= minVal && width < maxVal;
    });
    return breakpoint?.at(0);
  }
  getPreferredColorScheme() {
    if (!isServer && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  }
  emitPluginChange() {
    this.#unistylesEvents.emit('__unistylesOnChange', {
      type: 'plugin'
    });
  }
  emitThemeChange() {
    this.#unistylesEvents.emit('__unistylesOnChange', {
      type: 'theme',
      payload: {
        themeName: this.#themeName
      }
    });
  }
  emitLayoutChange() {
    this.#unistylesEvents.emit('__unistylesOnChange', {
      type: 'layout',
      payload: {
        breakpoint: this.#breakpoint,
        orientation: this.#screenWidth > this.#screenHeight ? 'landscape' : 'portrait',
        screen: {
          width: this.#screenWidth,
          height: this.#screenHeight
        }
      }
    });
  }
}
export const UnistylesModule = new UnistylesBridgeWeb();
//# sourceMappingURL=UnistylesModule.js.map