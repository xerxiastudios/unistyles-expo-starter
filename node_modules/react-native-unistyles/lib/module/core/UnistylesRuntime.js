import { ScreenOrientation, UnistylesError } from '../common';
/**
 * Utility to interact with the Unistyles during runtime
 */
export class UnistylesRuntime {
  constructor(unistylesBridge, unistylesRegistry) {
    this.unistylesBridge = unistylesBridge;
    this.unistylesRegistry = unistylesRegistry;
  }

  /**
   * Get the current color scheme
   * @returns - The current color scheme
   */
  get colorScheme() {
    return this.unistylesBridge.colorScheme;
  }

  /**
   * Get info about adaptive themes
   * @returns - boolean indicating if the adaptive themes are enabled
   */
  get hasAdaptiveThemes() {
    return this.unistylesBridge.hasAdaptiveThemes;
  }

  /**
   * Get the current theme name
   * @returns - The current theme name
   */
  get themeName() {
    return this.unistylesBridge.themeName;
  }

  /**
   * Get the current content size category
   * @returns - The current content size category
   */
  get contentSizeCategory() {
    return this.unistylesBridge.contentSizeCategory;
  }

  /**
   * Get the current breakpoint based on device size
   * @returns - The current breakpoint
   */
  get breakpoint() {
    return this.unistylesBridge.breakpoint;
  }

  /**
   * Get registered breakpoints with UnitylesRegistry
   * @returns - The registered breakpoints
   */
  get breakpoints() {
    return this.unistylesRegistry.breakpoints;
  }

  /**
   * Get the names of currently enabled plugins
   * @returns - The names of currently enabled plugins
   */
  get enabledPlugins() {
    return this.unistylesBridge.enabledPlugins;
  }

  /**
   * Get the screen size
   * @returns - The screen size { width, height }
   */
  get screen() {
    return {
      width: this.unistylesBridge.screenWidth,
      height: this.unistylesBridge.screenHeight
    };
  }

  /**
   * Get the screen orientation
   * @returns - The screen orientation
   */
  get orientation() {
    const {
      width,
      height
    } = this.screen;
    if (width > height) {
      return ScreenOrientation.Landscape;
    }
    return ScreenOrientation.Portrait;
  }

  /**
   * Switch to a different theme
   * @param name - The name of the theme to switch to
   * @returns - boolean indicating if the theme was switched
   */
  setTheme = name => {
    if (name === this.themeName) {
      return;
    }
    if (this.unistylesRegistry.hasTheme(name)) {
      this.unistylesBridge.useTheme(name);
      return true;
    }
    throw new Error(UnistylesError.ThemeNotRegistered);
  };

  /**
   * Enable or disable adaptive themes
   * @param enable - boolean indicating if adaptive themes should be enabled
   */
  setAdaptiveThemes = enable => {
    this.unistylesBridge.useAdaptiveThemes(enable);
  };

  /**
   * Enable a plugin
   * @param plugin - Plugin that conforms to UnistylesPlugin interface
   */
  addPlugin = plugin => {
    this.unistylesRegistry.addPlugin(plugin);
  };

  /**
   * Disable a plugin
   * @param plugin - Plugin that conforms to UnistylesPlugin interface
   */
  removePlugin = plugin => {
    this.unistylesRegistry.removePlugin(plugin);
  };
}
//# sourceMappingURL=UnistylesRuntime.js.map